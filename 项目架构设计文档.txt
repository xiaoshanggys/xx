# 商城小程序项目技术架构设计文档

## 技术选型
- 微信小程序前端：微信小程序原生
- 后端API服务：Node.js、Express、MySQL（或其他关系型数据库）、Redis（缓存/会话）、Nginx（负载均衡/反向代理）
- 管理后台：Vue.js、Element UI、Node.js（同后端）、Express（前后端集成在同一项目中）
- 其他：HTTPS、CDN、Git（版本管理）、PM2（Node进程管理）、日志/监控工具

---

## 一、总体架构说明

本项目分为三大部分：
1. 微信小程序前端（用户用的）
2. 后端API服务（负责数据和业务）
3. 管理后台（公司运营人员用的）

三者通过互联网连接：
- 用户在小程序上浏览、下单，所有操作都通过网络请求到后端API。
- 管理后台用于管理商品、订单、用户等，也通过API和后端通信。
- 后端API服务负责处理所有业务逻辑和数据存储。

**举例说明：**
- 用户在小程序下单，前端把订单信息发给后端API，后端存到数据库。
- 运营人员在后台上新商品，后台把商品信息发给后端API，后端也存到数据库。

---

## 二、高并发应对思路

高并发就是“很多人同时用”，比如双十一抢购时，成千上万人一起访问商城。

**我们的做法：**
- 后端用Node.js+Express，像多线程服务员，可以同时服务很多人。
- 数据库用“连接池”，就像银行有多个窗口，大家可以同时办理业务。
- 图片等静态资源用CDN（内容分发网络），就像在全国各地都设有仓库，用户访问最近的仓库，速度快、压力小。
- 重要操作（如下单、支付）做“幂等性”处理，防止用户多次点击造成重复订单。
- 可以随时增加服务器（水平扩展），用Nginx做“负载均衡”，就像多开几个收银台，分流顾客。

**场景说明：**
- 如果有10000人同时抢购，系统会自动分流请求，保证不卡顿、不崩溃。

---

## 三、安全性设计

安全性就是防止“被偷、被骗、被攻击”。

### 1. 身份认证
- 所有API接口都要验证身份（如Token、Session），防止陌生人乱操作。
- 用户密码加密存储（md5），即使数据库泄露也看不到明文密码。
- 管理后台用账号密码+session认证，只有授权人员能登录。

**举例说明：**
- 用户登录后获得“通行证”（Token），每次操作都要带上，别人拿不到就无法冒充。

### 2. 数据安全
- 所有数据传输用HTTPS加密，防止被窃听。
- 敏感数据（如手机号、地址）加密存储。
- 防止SQL注入、XSS、CSRF等攻击：所有输入都要检查过滤，重要操作要二次确认。

**举例说明：**
- 用户输入的内容会被“安检”，不合规的内容会被拦截。
- 支付、删除等操作会弹窗确认，防止误操作。

### 3. 接口安全
- 登录/注册/支付等接口有频率限制，防止被恶意刷接口。
- 防止小程序被破解或接口被刷：接口有签名校验、IP黑名单、验证码等多重保护。

**场景说明：**
- 如果有人用机器不停注册账号，系统会自动识别并拦截。

---

## 四、各子系统简要说明

### 1. 微信小程序前端
- 用户用来浏览商品、下单、支付、查看订单等。
- 只保存必要的本地数据，敏感信息不落地。
- 通过API和后端通信，所有数据都实时获取。

**举例说明：**
- 用户打开小程序，看到的商品、订单等信息都是从后端实时获取的。

### 2. 后端API服务
- 负责所有业务逻辑处理、数据存储、身份验证和安全。
- 采用分层架构（路由-控制器-服务-数据访问），结构清晰，便于维护。
- 有完善的日志、监控和异常处理机制。

**举例说明：**
- 用户下单、支付、评价等所有操作，都是后端API在处理。

### 3. 管理后台
- 公司运营人员用来管理商品、订单、用户、营销等。
- 权限分级，操作有日志，防止误操作和追溯问题。

**举例说明：**
- 只有有权限的员工才能删除商品，所有操作都会被记录。

---

## 五、部署架构

### 1. 开发环境

本项目支持多种开发与部署环境（如本地开发环境、测试服务器环境、生产环境等），每个环境均应有独立的配置文件。通过调整启动参数或设置环境变量，系统可自动加载对应环境的配置，实现灵活切换和安全隔离。

#### 1）环境类型
- 本地开发环境（development）：开发人员本地调试使用，通常连接本地或开发专用数据库，日志级别较高，便于排查问题。
- 生产环境（production）：正式对外服务环境，配置最为严格，注重安全与性能。

#### 2）配置文件设计
- 每个子项目（前端、后端、管理后台）均应在根目录下设有 `config/` 目录，内含不同环境的配置文件，例如：
  - `config/development.js` 或 `config.development.json`
  - `config/production.js` 或 `config.production.json`
- 配置内容包括但不限于：数据库连接、Redis配置、API地址、第三方服务密钥、日志级别、静态资源路径等。

#### 3）环境切换方式
- 启动项目时通过环境变量（如 `NODE_ENV=development`）或命令行参数指定当前环境，程序自动加载对应配置文件。
- 例如：
  - `NODE_ENV=development npm run dev`
  - `NODE_ENV=production pm2 start app.js`
- 代码中通过统一的配置加载模块（如 `config/index.js`）根据环境变量动态引入对应配置。

#### 4）安全与规范
- 配置文件中不得硬编码敏感信息，建议敏感信息（如数据库密码、密钥等）通过环境变量或专用密钥管理服务注入。
- 配置文件应纳入版本控制，但敏感配置（如 `.env.production`）可通过 `.gitignore` 忽略，仅在部署时下发。

#### 5）举例说明

- 本地开发时，开发者在 `.env.development` 文件中配置本地数据库、Redis等信息，启动时自动加载。
- 生产环境下，所有敏感配置通过环境变量注入，保证安全。

#### 6）启动时选择配置文件的设计方案

为实现启动时自动选择不同环境的配置文件，建议采用如下设计：

- 在项目入口文件（如 `app.js` 或 `main.js`）中，首先读取环境变量（如 `NODE_ENV`），根据其值动态加载对应的配置文件。例如：

  ```javascript
  // 伪代码示例
  const env = process.env.NODE_ENV || 'development';
  const config = require(`./config/${env}.js`);
  ```

- 配置加载模块（如 `config/index.js`）统一封装配置加载逻辑，其他业务代码只需从该模块获取配置，无需关心环境细节。

- 推荐在 `package.json` 的 `scripts` 字段中预设不同环境的启动命令，方便开发和部署。例如：

  ```json
  "scripts": {
    "dev": "NODE_ENV=development node app.js",
    "start": "NODE_ENV=production node app.js"
  }
  ```

- 对于 Docker 或云部署环境，可通过环境变量注入方式传递 `NODE_ENV` 和敏感配置，保证安全性和灵活性。

**小结：**  
通过上述方案，项目可根据启动参数或环境变量自动选择并加载对应的配置文件，实现多环境灵活切换，提升开发效率和系统安全性。



## 六、数据存储设计

本项目采用MySQL（或其他关系型数据库）、Redis（缓存/会话/高频数据）和文件存储分开存储不同类型的数据：

### 1. MySQL（关系型数据库）
主要用于存储结构化、持久化的业务数据，表设计如下：
- 用户表（user）：存储用户基本信息、登录凭证、微信授权信息等
- 商品表（goods）：存储商品名称、图片、价格、库存、描述等
- 商品分类表（category）：存储商品分类信息
- 购物车表（cart）：存储用户购物车商品明细
- 订单表（order）：存储订单主信息（用户、金额、状态、时间等）
- 订单商品表（order_item）：存储订单内各商品明细
- 支付记录表（payment）：存储订单支付相关信息
- 收货地址表（address）：存储用户收货地址
- 收藏表（favorite）：存储用户收藏的商品
- 评价表（comment）：存储商品评价内容
- 售后表（aftersale）：存储售后申请及处理记录
- 优惠券表（coupon）：存储优惠券信息及发放记录
- 轮播图表（banner）：存储首页轮播图信息
- 推荐商品表（recommend）：存储首页及个性化推荐商品
- 消息通知表（notify）：存储系统消息、订单通知等
- 管理员表（admin）：存储后台管理员账号、权限等

所有表都有“创建时间、更新时间”等基础字段。订单、支付、评价等表有“状态”字段，方便业务流转。

**举例说明：**
- 用户下单后，订单信息会被存到“订单表”，商品明细存到“订单商品表”。

### 2. Redis（缓存/会话/高频数据）
主要用于存储高频访问、临时性或需要快速读写的数据：
- 用户Session/Token信息：实现登录态管理、单点登录等
- 验证码、短信验证码等临时数据：防止刷接口、暴力破解
- 热门商品、首页推荐、轮播图等高频数据的缓存：提升访问速度，减轻数据库压力
- 购物车临时数据（可选）：提升未登录用户体验
- 接口限流、黑名单、频率统计等安全相关数据

**举例说明：**
- 用户登录后，登录状态信息会暂存在Redis，方便快速校验。
- 热门商品信息缓存到Redis，用户访问时能更快看到。

### 3. 文件存储
用于存储商品图片、轮播图等文件类型数据：
- 推荐使用对象存储服务（如阿里云OSS、腾讯云COS、七牛云等），支持大规模文件存储和CDN加速，提升访问速度和可靠性。
- 数据库只保存图片/文件的URL地址，实际文件存储在对象存储服务或独立文件服务器。
- 适用于商品图片、轮播图、用户上传图片、评价图片等。

**举例说明：**
- 用户上传商品图片，图片会存到云存储，数据库只保存图片链接，用户访问时直接从云端加载图片。

---

如需详细ER图或字段设计，可后续补充。 

## 七、总结

本架构简洁高效，既能应对高并发访问，又能保证数据和用户安全，适合中小型商城项目，后续可平滑扩展。

---